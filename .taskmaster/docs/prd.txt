# Prizm - Media Transformation API for AI Agent Workflows (Updated June 2025)

## üéØ PRIZM: MEDIA TRANSFORMATION SDK

**Prizm is the TypeScript SDK that provides unified access to 15+ AI providers through a clean provider->model->transform architecture, with multiple interface layers from zero-config one-liners to maximum-control APIs.**

### **Target Users: All Media-Enabled Applications**
- **AI Agent Frameworks** (LangChain, AutoGen, custom agents)
- **Multi-modal Applications** requiring consistent media transformation
- **Workflow Orchestrators** needing reliable media processing
- **Developer Tools** that want to add media capabilities
- **Production Applications** requiring enterprise-grade media infrastructure

### **Core Value Proposition**
Prizm eliminates media transformation complexity through a layered SDK approach:
- **Zero Config**: One-liner fluent API that "just works"  
- **Maximum Control**: Full provider/model/parameter access
- **Language Agnostic**: REST API for any tech stack
- **Production Ready**: Async job system with generation chains

```typescript
// Core SDK Architecture - Maximum Control
import { ProviderRegistry } from 'prizm';

const registry = ProviderRegistry.getInstance();
const provider = await registry.getProvider('replicate');
const model = await provider.getModel('flux-pro');
const result = await model.transform(textInput, options);

// Fluent API - Zero Config "Just Works"
import { $ } from 'prizm';

const result = await $("replicate")("flux-pro")(textInput, options);

// REST API - Language Agnostic
POST /api/v1/transform/replicate/flux-pro
{ capability: 'text-to-image', input: textInput, options: {} }

// Job System - Async Workflows
const { jobId } = await fetch('/api/v1/transform/...');
const result = await pollJob(jobId);
```

## üèóÔ∏è PRIZM SDK ARCHITECTURE - LAYERED APPROACH

### **Layer 1: Core SDK** (Maximum Control)
The foundational provider->model->transform architecture:

```typescript
// Core SDK - Full control over every aspect
import { ProviderRegistry, MediaCapability } from 'prizm';

const registry = ProviderRegistry.getInstance();
await registry.initialize();

// Provider management
const provider = await registry.getProvider('replicate');
const isAvailable = await provider.isAvailable();
const models = provider.getModelsForCapability(MediaCapability.TEXT_TO_IMAGE);

// Model management  
const model = await provider.getModel('black-forest-labs/flux-schnell');
const capabilities = model.getCapabilities();
const parameters = model.getParameters();

// Transformation with full control
const result = await model.transform(textInput, {
  aspect_ratio: "16:9",
  steps: 4,
  guidance_scale: 7.5
});
```

### **Layer 2: Fluent API** (Zero Config)
Beautiful one-liners that "just work":

```typescript
// Fluent API - Zero configuration required
import { $ } from 'prizm';

// One-liner magic
const image = await $("replicate")("flux-schnell")(textInput);

// With options
const video = await $("runway")("gen-3")(textInput, { duration: 5 });

// Chaining (future)
const final = await $("replicate")("flux-schnell")(textInput)
  .then(img => $("ffmpeg")("overlay")(img, logoImage));
```

### **Layer 3: REST API** (Language Agnostic)
HTTP interface for any language/framework:

```typescript
// REST API - Works from any language
POST /api/v1/transform/{provider}/{model}
{
  "capability": "text-to-image",
  "input": "A beautiful sunset",
  "options": { "aspect_ratio": "16:9" }
}

// Returns job for async polling
{ "success": true, "jobId": "job_123", "statusUrl": "/api/v1/jobs/job_123" }
```

### **Layer 4: Job System** (Production Workflows)
Async processing with generation chains:

```typescript
// Job system - Production async workflows
const job = await createTransformJob('replicate', 'flux-schnell', input, options);
const result = await pollJobUntilComplete(job.id);

// Complete generation chain preserved
console.log(result.generation_chain);
// [{ step: 1, provider: 'openrouter', model: 'deepseek-chat' },
//  { step: 2, provider: 'replicate', model: 'flux-schnell' }]
```

### **Layer 5: Smart Asset System** (Format-Agnostic Loading)
Zero-config asset loading with automatic capability detection:

```typescript
// Smart Asset Loading - Auto-detects any format
import { AssetLoader } from 'prizm';

const asset = AssetLoader.load('video.mp4');  // Auto-detects: Video + Audio + Speech
const video = await asset.asVideo();           // Type-safe video access
const audio = await asset.extractAudio();     // FFmpeg integration
const speech = await asset.asSpeech();        // Speech recognition

// Format information
const formatInfo = AssetLoader.getFormatInfo('video.mp4');
// { extension: 'mp4', category: 'video', roles: ['video', 'audio', 'speech'] }

// Role checking
const canDoSpeech = AssetLoader.supportsRoles('video.mp4', ['speech']);
```

### **Layer 6: Asset Utilities** (Convenience Methods)
Rich helper methods for asset manipulation:

```typescript
// Asset utilities
const asset = AssetLoader.load('image.jpg');
const size = asset.getHumanSize();           // "2.3 MB"
const duration = asset.getHumanDuration();   // "3:45"
const dataUrl = asset.toDataURL();           // "data:image/jpeg;base64,..."
const base64 = asset.toBase64();             // Direct base64 encoding

// Asset validation
const validation = asset.validate();
// { valid: true, errors: [] }

// Asset cloning and metadata
const newAsset = asset.withMetadata({ title: "New Title" });
const clone = asset.clone();
```

### **Layer 7: Type Guards & Role Checking** (Runtime Safety)
Safe runtime type checking for dynamic assets:

```typescript
// Type-safe role checking
import { hasVideoRole, hasAudioRole, hasTextRole } from 'prizm';

const asset = AssetLoader.load('unknown-file.???');

if (hasVideoRole(asset)) {
  const resolution = await asset.getResolution();
  const frameRate = asset.getFrameRate();
}

if (hasAudioRole(asset)) {
  const sampleRate = await asset.getSampleRate();
  const channels = asset.getChannels();
}

// Batch role checking
const roles = asset.getRoles(); // ['video', 'audio', 'speech']
const canPlay = asset.canPlayRole('video'); // true
```

### **Layer 8: Provider Utilities** (Discovery & Management)
Helper methods for provider and model discovery:

```typescript
// Provider discovery
const registry = ProviderRegistry.getInstance();
const providers = registry.getAvailableProviders();
const falProvider = registry.getProvider('replicate');

// Model discovery
const imageModels = falProvider.getModelsForCapability('text-to-image');
const freeModels = togetherProvider.getFreeModels(); // Auto-detect free models
const allModels = provider.models; // Complete model list

// Provider health checking
const health = await provider.getHealth();
// { status: 'healthy', uptime: 12345, activeJobs: 3 }
```

### **Layer 9: Job Management Utilities** (Production Workflows)
Comprehensive job system with generation chains:

```typescript
// Job creation and polling helpers
async function createAndPollJob(provider, model, input, options) {
  const { jobId } = await fetch(`/api/v1/transform/${provider}/${model}`, {
    method: 'POST',
    body: JSON.stringify({ capability: 'text-to-image', input, options })
  });
  
  return await pollJobUntilComplete(jobId);
}

// Generation chain analysis
const metadata = await fetch(`/api/v1/jobs/${jobId}/metadata`);
const chain = metadata.generation_chain;
// [{ step: 1, provider: 'openrouter', model: 'deepseek-chat' },
//  { step: 2, provider: 'replicate', model: 'flux-schnell' }]

// Asset URL management
const urls = job.urls;
// { primary: '/download', thumbnails: ['/thumb/small'], previews: ['/preview/mp4'] }
```

### **Layer 10: Format Registry & Detection** (Extensibility)
Comprehensive format support with extensible detection:

```typescript
// Format detection and registry
import { FORMAT_REGISTRY, detectFormat } from 'prizm';

const formatInfo = detectFormat('video.mp4');
// { extension: 'mp4', mimeType: 'video/mp4', category: 'video', roles: ['video', 'audio', 'speech'] }

// Supported formats
console.log(Object.keys(FORMAT_REGISTRY));
// ['mp4', 'avi', 'mov', 'mp3', 'wav', 'png', 'jpg', 'txt', 'md', 'json', ...]

// Custom format registration
FORMAT_REGISTRY['xyz'] = {
  extension: 'xyz',
  mimeType: 'application/xyz',
  category: 'custom',
  roles: ['custom']
};
```

## üöÄ NEW: DYNAMIC PROVIDER ‚Üí SERVICE LOADING (June 2025)

### **Go-Like Module Loading for Providers and Services**

Prizm now supports dynamic loading of providers and services from URLs, enabling a decentralized ecosystem similar to Go modules:

```typescript
// Load providers dynamically from GitHub
const provider = await getProvider('https://github.com/company/custom-provider');

// Load providers from NPM packages
const provider = await getProvider('@company/ai-provider@2.1.0');

// Providers can dynamically load their service dependencies
await provider.configure({
  serviceUrl: 'https://github.com/company/gpu-accelerated-service',
  serviceConfig: { enableGPU: true, memory: '24GB' },
  autoStartService: true
});
```

### **Benefits of Dynamic Loading**
- **üîÑ Dynamic Dependencies**: Providers specify exact service needs via URL
- **üì¶ Decentralized Ecosystem**: Community-driven provider/service development
- **üîß Auto-Configuration**: Providers automatically configure from service info
- **üöÄ Zero-Setup**: Just specify a URL, everything else is automatic
- **üåê Version Control**: Use semantic versioning for reproducible deployments
- **üîí Service Isolation**: Each provider can use different service versions

### **Supported Sources**
- **Static Registry**: `getProvider('ffmpeg-docker')`
- **GitHub Repositories**: `https://github.com/owner/repo` or `github:owner/repo@tag`
- **NPM Packages**: `@scope/package@version` or `npm:package@version`
- **File System**: `file:///path/to/provider`

### **Provider ‚Üí Service Architecture**
Providers can now declaratively specify their service dependencies:

```typescript
// Provider configuration with service dependency
await provider.configure({
  // Static service from registry
  serviceUrl: 'ffmpeg-docker',
  
  // GitHub service with specific version
  serviceUrl: 'github:company/enhanced-ffmpeg@v2.1.0',
  
  // NPM service package
  serviceUrl: '@company/gpu-service@latest',
  
  // Service-specific configuration
  serviceConfig: {
    enableGPU: true,
    maxConcurrent: 4,
    memory: '8GB'
  },
  
  // Automatic service lifecycle management
  autoStartService: true
});
```

### **Real-World Use Cases**
- **AI Provider** needs specific GPU-optimized inference service
- **Video Provider** needs latest FFMPEG with custom codec support
- **Audio Provider** needs specialized real-time processing service
- **Different environments** (dev vs prod) need different service configurations
- **Enterprise customers** need custom service implementations

## üéØ COMPLETE SDK COVERAGE

**Prizm provides every level from zero-config to maximum control:**

1. **Core SDK** - Full provider->model->transform control
2. **Fluent API** - One-liner magic: `$("provider")("model")(input)`  
3. **REST API** - Language-agnostic HTTP interface
4. **Job System** - Production async workflows
5. **Smart Assets** - Format-agnostic loading with auto-detection
6. **Asset Utilities** - Rich helper methods for manipulation
7. **Type Guards** - Runtime safety and role checking
8. **Provider Utils** - Discovery and health management  
9. **Job Management** - Complete workflow orchestration
10. **Format Registry** - Extensible format detection system
